
# VERY IMPORTANT:
# ---------------
# the names client and server that we are going to use
# in that files, are the names used from our docker-compose.yml
# file.
#
# but since the name server is a protected keyword so if we tried 
# using this in our configuration file we might end up seeing an error
# because it might say like why are you putting the word server right here
# Iâ€™m Nginx and the keyword server to me is an operator.
# so to make Nginx kind of happy we're going to change our terminology for
# our back end service a little bit.
# so we are going to change the service name from server to api.

# there is an upstream server called client
upstream client {
  # that server is called/located at client:30000
  server client:3000;
}

# there is an upstream server called api
upstream api {
  # that server is called/located at api:5000
  server api:5000;
}

# we're telling Nginx that we want there to be a server
# that listen on port 80
server {
  listen 80;

  # routing rules
  location / {
    proxy_pass http://client;
  }

  # ONLY FOR DEVELOPMENT
  # allow websocket connection 
  location /sockjs-node {
    proxy_pass http://client;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
  }


  location /api {

    # rewrite rule:
    # -------------
    # apply a regex 
    # 
    # if we match anything like: /api/.....
    # so take off the /api and leave it as /$1
    # the $1 represent the next part of the URL
    # after the first /api
    # 
    # the break keyword is a directive and it basically saying
    # do not try to apply any other rewrite rules after applying 
    # this one.
    #
    # so if we had other rules in place to rewrite the URL with the 
    # pathname here the break key word essentially means hey nginx 
    # don't try to do any other rewrite here.
    #
    # the reason we put in break here is essentially to keep from 
    # going through continuous rules as nginx rewrites the URL and 
    # tries to match it to a new route with the new rewritten URL
    rewrite /api/(.*)  /$1  break;

    # after that the proxy pass to /api like so
    proxy_pass http://api;
  }
}
