sudo: required

services:
  - docker

before_install:
  # the build context is ./client
  - docker build -t shomronh/react-test -f ./client/Dockerfile.dev ./client


# the script section is the primary test running section, and if any of the scripts
# that we add inside of here exit with the status code other than zero, then Travis CI
# is going to assume that our build failed
script:
  - docker run -e CI=true shomronh/react-test npm test

# build images with productions version of the images
after_success:
  - docker build -t shomronh/multi-client ./client
  - docker build -t shomronh/multi-nginx  ./nginx
  - docker build -t shomronh/multi-server ./server
  - docker build -t shomronh/multi-worker ./worker

  # log in to the Docker CLI:
  # -------------------------
  # the | sign represent a pipe, which shift that value into the next 
  # following command
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_ID" --password-stdin

  # push images to docker hub
  - docker push shomronh/multi-client
  - docker push shomronh/multi-nginx
  - docker push shomronh/multi-server
  - docker push shomronh/multi-worker

deploy:

  # What this is doing is forcing Travis to use the v2 (experimental) version of 
  # the dpl script which does not have the bug.
  edge: true

  provider: elasticbeanstalk

  # region can taken from our beanstalk url
  # https://us-east-2.console.aws.amazon.com/elasticbeanstalk/home?region=us-east-2#/environments
  region: us-east-2

  # Application name: multi-docker
  app: multi-docker

  env: MultiDocker-env

  # AWS => Services => S3
  bucket_name: elasticbeanstalk-us-east-2-481044166514
  # arbitrary name we can choose
  backet_path: docker-multi

  on:
    branch: master

  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: $AWS_SECRET_KEY

